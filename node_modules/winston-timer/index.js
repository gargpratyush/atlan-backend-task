// Generated by CoffeeScript 1.10.0
'use strict';
var BILLION, Chalk, DEFAULT_CONFIG, MILLION,
  hasProp = {}.hasOwnProperty;

Chalk = require('chalk');

MILLION = 1000000;

BILLION = 1000000000;

DEFAULT_CONFIG = {
  level: 'debug',
  use_colors: true,
  thresholds: [10, 100, 500, 999, Number.MAX_VALUE],
  colors: [Chalk.green.bold, Chalk.green, Chalk.yellow, Chalk.red, Chalk.red.bold],
  start_prefix: 'Starting timer "',
  stop_prefix: 'Finished timer "',
  start_suffix: '"',
  stop_suffix: '" in'
};

module.exports = function(logger, configIn) {
  var config, key, value;
  config = {};
  if (configIn != null) {
    for (key in DEFAULT_CONFIG) {
      if (!hasProp.call(DEFAULT_CONFIG, key)) continue;
      value = DEFAULT_CONFIG[key];
      if (configIn[key] != null) {
        config[key] = configIn[key];
      } else {
        config[key] = DEFAULT_CONFIG[key];
      }
    }
  } else {
    config = DEFAULT_CONFIG;
  }
  logger._profiling_timers = {};
  logger.start = function(name) {
    var now;
    if (logger._profiling_timers[name]) {
      throw new Error('Timer already started: \'' + name + '\'');
    }
    now = process.hrtime();
    logger._profiling_timers[name] = now;
    return now;
  };
  logger.stop = function(name) {
    var diff;
    if (!logger._profiling_timers[name]) {
      throw new Error('Timer not started: \'' + name + '\'');
    }
    diff = process.hrtime(logger._profiling_timers[name]);
    delete logger._profiling_timers[name];
    return diff;
  };
  logger.stop_ms = function(name) {
    var diff;
    diff = logger.stop(name);
    return (diff[0] * BILLION + diff[1]) / MILLION;
  };
  logger.start_log = function(name, level, prefix, suffix) {
    level || (level = config.level);
    prefix || (prefix = config.start_prefix);
    suffix || (suffix = config.start_suffix);
    logger.start(name);
    return logger.log(level, prefix + name + suffix);
  };
  return logger.stop_log = function(name, level, prefix, suffix) {
    var i, idx, len, ms, ref, threshold;
    level || (level = 'debug');
    prefix || (prefix = config.stop_prefix);
    suffix || (suffix = config.stop_suffix);
    ms = logger.stop_ms(name);
    if (config.use_colors) {
      ref = config.thresholds;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        threshold = ref[idx];
        if (ms < threshold) {
          ms = config.colors[idx].apply(null, [ms]);
        }
      }
    }
    logger.log(level, prefix + name + suffix, ms + ' ms');
  };
};
